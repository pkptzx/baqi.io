<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on 码魂</title>
    <link>http://blog.lazy.icu/categories/java/</link>
    <description>Recent content in java on 码魂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 13 Aug 2019 20:09:58 +0800</lastBuildDate><atom:link href="http://blog.lazy.icu/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java8新的时间和日期API</title>
      <link>http://blog.lazy.icu/2019/08/13/java8newdate/</link>
      <pubDate>Tue, 13 Aug 2019 20:09:58 +0800</pubDate>
      
      <guid>http://blog.lazy.icu/2019/08/13/java8newdate/</guid>
      <description>Java 8的日期和时间类包含 LocalDate、LocalTime、Instant、Duration 以及 Period，这些类都包含在 java.time 包中，Java 8 新的时间API的使用方式，包括创建、格式化、解析、计算、修改，下面我们看下如何去使用。
LocalDate 只会获取年月日 1 2 3 4 5 6 7 8 9 10 11 12 13 14  // 创建 LocalDate // 获取当前年月日 LocalDate localDate = LocalDate.now(); // 构造指定的年月日 LocalDate localDate1 = LocalDate.of(2019, 9, 12); // 获取年、月、日、星期几 int year = localDate.getYear(); int year1 = localDate.get(ChronoField.YEAR); Month month = localDate.getMonth(); int month1 = localDate.get(ChronoField.MONTH_OF_YEAR); int day = localDate.getDayOfMonth(); int day1 = localDate.get(ChronoField.DAY_OF_MONTH); DayOfWeek dayOfWeek = localDate.getDayOfWeek(); int dayOfWeek1 = localDate.get(ChronoField.DAY_OF_WEEK);   LocalTime 只会获取时分秒 1 2 3 4 5 6 7 8 9 10 11 12  // 创建 LocalTime LocalTime localTime = LocalTime.of(14, 14, 14); LocalTime localTime1 = LocalTime.now(); // 获取小时 int hour = localTime.getHour(); int hour1 = localTime.get(ChronoField.HOUR_OF_DAY); // 获取分 int minute = localTime.getMinute(); int minute1 = localTime.get(ChronoField.MINUTE_OF_HOUR); // 获取秒 int second = localTime.getMinute(); int second1 = localTime.get(ChronoField.SECOND_OF_MINUTE);   LocalDateTime 获取年月日时分秒，相当于 LocalDate + LocalTime 1 2 3 4 5 6 7 8 9 10  // 创建 LocalDateTime LocalDateTime localDateTime = LocalDateTime.</description>
    </item>
    
    <item>
      <title>java校验maven下载的jar文件</title>
      <link>http://blog.lazy.icu/2019/05/23/java-check-maven-jar/</link>
      <pubDate>Thu, 23 May 2019 15:58:08 +0800</pubDate>
      
      <guid>http://blog.lazy.icu/2019/05/23/java-check-maven-jar/</guid>
      <description>有时候maven真的很坑!
有时候提示invalid LOC header (bad signat signature),
但又有时候什么都不提示,工程报错,情况有肯多中,不知道大家遇到过几种诡异的.
很多人说加-U参数或在maven插件选择强制刷新等操作,但很不好使,一点用都没有.
今天我就遇到POM提示第一行错误,这怎么可能?其他任何地方都不报错,用mvn命令的时候才能看到jar invalid.
我还遇到整个spring的项目只有test报错,其他的都不报错,编辑器里提示的Unknown Error~
真没法玩了~我知道肯定有一个或几个jar下载的有问题.但就算你知道了难道一个一个去找删?一个还好说,有时候5,6个真是浪费时间.
不如就写个代码跑一下吧~
public class MvnCheckJar { public static void main(String[] args) throws Exception { String localMvnPath = &amp;quot;F:/mvnlib&amp;quot;; // 遍历文件夹,找出jar\pom和效验文件进行对比,如果不相符,则删除 getFile(new File(localMvnPath), &amp;quot;jar,pom&amp;quot;); System.out.println(&amp;quot;完毕&amp;quot;); } public static void getFile(File path, String suffixs) throws Exception { String[] suffixs_ = new String[] {}; if (suffixs != null) suffixs_ = suffixs.split(&amp;quot;,&amp;quot;); if (path.isFile()) { for (String suffix : suffixs_) { if (path.getName().endsWith(suffix)) { // System.out.println(path.getAbsolutePath() ); handler(path); } } } else { File[] ff = path.listFiles(); if(ff!=null) for (File x : ff) { getFile(x, suffixs); } } } /** * 验证,发现不匹配则删除 * * @throws IOException */ public static void handler(File f) throws Exception { File fsha1 = new File(f.getAbsolutePath() + &amp;quot;.sha1&amp;quot;); if (fsha1.exists()) { String sha1 = FileUtils.readFileToString(fsha1, &amp;quot;utf-8&amp;quot;).replaceAll(&amp;quot;(?m).*(\\w{40}).*&amp;quot;, &amp;quot;$1&amp;quot;).replaceAll(&amp;quot;\\n|\\r&amp;quot;, &amp;quot;&amp;quot;); String currsha1 = sha1(f); if(!sha1.equals(currsha1)){//如果不等,则删除 当前文件和sha1 // System.out.println(&amp;quot;sha1file: &amp;quot; + sha1 ); fsha1.</description>
    </item>
    
  </channel>
</rss>
